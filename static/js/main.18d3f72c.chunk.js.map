{"version":3,"sources":["home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","window","ethereum","send","web3","Web3","lottery","eth","Contract","useState","manager","setManager","players","setPlayers","contractBalance","setContractBalance","value","setValue","message","setMessage","useEffect","a","methods","call","manage","getPlayers","getBalance","options","address","balance","init","handleSubmit","e","preventDefault","getAccounts","accounts","enter","from","utils","toWei","onPickWinner","pickWinner","className","length","fromWei","onSubmit","htmlFor","style","margin","marginTop","type","onChange","target","onClick","App","detectEthereumProvider","provider","console","log","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18d3f72c.chunk.js","sourcesContent":["import './App.css';\r\nimport Web3 from \"web3\";\r\n// import web3 from './web3';\r\n// import lottery  from './lottery';\r\nimport { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\n\r\nfunction  Home() {\r\n   const address='0x3A5dA4d832494D904caEb68473D3974d6001fbCC';\r\n\r\n   const abi=[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}];\r\n   \r\n   window.ethereum.send('eth_requestAccounts');\r\n   const web3 =new Web3(window.ethereum);\r\n   const lottery=new web3.eth.Contract(abi,address);\r\n\r\n   const [manager, setManager] = useState('')\r\n   const [players, setPlayers] = useState([]);\r\n   const [contractBalance, setContractBalance] = useState('');\r\n   const [value, setValue] = useState('');\r\n   const [message, setMessage] = useState('');\r\n   // console.log(provider)\r\n   \r\n\r\n\r\n\r\n\r\n\r\n   useEffect(() => {\r\n      \r\n      const init = async () => {    \r\n      const manage = await lottery.methods.manager().call();\r\n      const players = await lottery.methods.getPlayers().call();\r\n      const balance = await web3.eth.getBalance(lottery.options.address);\r\n\r\n      setManager(manage);\r\n      setPlayers(players);\r\n      setContractBalance(balance);\r\n      };\r\n      init();\r\n   }, [])\r\n\r\n   // joining lottery by sending money\r\n   const handleSubmit = async(e) => {\r\n      e.preventDefault();\r\n      const accounts = await web3.eth.getAccounts();\r\n      setMessage('Waiting on transaction success...');\r\n      await lottery.methods.enter().send({\r\n         from: accounts[0],\r\n         value: web3.utils.toWei(value, 'ether'),\r\n      });\r\n      setMessage('You have been entered!');\r\n   };\r\n\r\n   // picking the random winner in lottery\r\n   const onPickWinner = async () => {\r\n      const accounts = await web3.eth.getAccounts();\r\n      setMessage('Waiting on transaction success...');\r\n      await lottery.methods.pickWinner().send({\r\n      from: accounts[0],\r\n      });\r\n      setMessage('A winner has been picked!');\r\n   };\r\n   return (\r\n      <div className=\"App\">\r\n      <h1>Lottery Project</h1>\r\n      <h4>Managed by <span className=\"highlight\"> {manager}</span></h4>\r\n      <p>There are currently {players.length} people entered the lottery and total amount in Lottery is {web3.utils.fromWei(contractBalance, 'ether')} ETHER!</p>\r\n      <hr />\r\n      <h3>Try Your Luck</h3>\r\n      <form className=\"\" onSubmit={handleSubmit}>\r\n         <label htmlFor=\"\">Amount of ether (0.1+) :</label>\r\n         <input style={{ margin:'10px',  marginTop: '1vh' }} value={value} type=\"text\" onChange={(e) => setValue(e.target.value)} />\r\n         <button style={{ margin:'10px',  marginTop: '1vh' }}>Enter</button>\r\n      </form>\r\n      <hr />\r\n      <div>\r\n         <h4>Ready to pick a winner?</h4>\r\n         <button onClick={onPickWinner}>Pick a winner!</button>\r\n      </div>\r\n      <hr />\r\n      <h2>{message}</h2>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Home;\r\n\r\n","import './App.css';\n// import web3 from './web3';\n// import lottery  from './lottery';\nimport { useEffect, useState } from \"react\";\nimport Home from './home';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nfunction App() {\n  \n  // const [manager, setManager] = useState('')\n  // const [players, setPlayers] = useState([]);\n  // const [contractBalance, setContractBalance] = useState('');\n  // const [provider, setProvider] = useState(null);\n  const [message, setMessage] = useState(false);\n\n  \n  // useEffect(() => {\n\n  //   const init = async () => {\n  //     const manage = await lottery.methods.manager().call();\n  //     const players = await lottery.methods.getPlayers().call();\n  //     const balance = await web3.eth.getBalance(lottery.options.address);\n\n  //     setManager(manage);\n  //     setPlayers(players);\n  //     setContractBalance(balance);\n  //   };\n  //   init();\n  // }, [])\n\n  // // joining lottery by sending money\n  // const handleSubmit = async(e) => {\n  //     e.preventDefault();\n  //     const accounts = await web3.eth.getAccounts();\n  //     setMessage('Waiting on transaction success...');\n  //     await lottery.methods.enter().send({\n  //       from: accounts[0],\n  //       value: web3.utils.toWei(value, 'ether'),\n  //     });\n  //     setMessage('You have been entered!');\n  // };\n\n  // // picking the random winner in lottery\n  // const onPickWinner = async () => {\n  //   const accounts = await web3.eth.getAccounts();\n  //   setMessage('Waiting on transaction success...');\n  //   await lottery.methods.pickWinner().send({\n  //     from: accounts[0],\n  //   });\n  //   setMessage('A winner has been picked!');\n  // };\n  // let provider ;\n  // = await detectEthereumProvider();\n\n  useEffect(() => {\n     const init=async()=>{\n      const provider = await detectEthereumProvider();\n      // setProvider(p)\n      if (provider) {\n        setMessage(true);\n        console.log(provider)\n        // From now on, this should always be true:\n        // provider === window.ethereum\n        // startApp(provider); // initialize your app\n      } else {\n        console.log('Please install MetaMask!');\n      }\n     }\n     init()\n    \n  }, [setMessage])\n\n  return (\n    <div className=\"App\">\n      {/* <h1>Lottery Project</h1>\n      <h4>Managed by <span className=\"highlight\"> {manager}</span></h4>\n      <p>There are currently {players.length} people entered the lottery and total amount in Lottery is {web3.utils.fromWei(contractBalance, 'ether')} ETHER!</p>\n      <hr />\n      <h3>Try Your Luck</h3>\n      <form className=\"\" onSubmit={handleSubmit}>\n        <label htmlFor=\"\">Amount of ether (0.1+) :</label>\n        <input style={{ margin:'10px',  marginTop: '1vh' }} value={value} type=\"text\" onChange={(e) => setValue(e.target.value)} />\n        <button style={{ margin:'10px',  marginTop: '1vh' }}>Enter</button>\n      </form>\n      <hr />\n      <div>\n        <h4>Ready to pick a winner?</h4>\n        <button onClick={onPickWinner}>Pick a winner!</button>\n      </div>\n      <hr />\n      <h2>{message}</h2> */}\n      {!message && <><h2>Use Browser with Metamask or anyother wallet</h2><p>Install metamask <a href='https://metamask.io/'>here</a> </p></>}\n\n      {message &&<Home ></Home>}\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}